let Container = require('../modules/data');
let mysql = require('../modules/mysql');
let methods = require('../modules/methods');
let chat = require('../modules/chat');

let discord = require('../managers/discord');

let user = require('../user');
let coffer = require('../coffer');
let enums = require('../enums');
let inventory = require('../inventory');

let vehicles = require('./vehicles');
let fraction = require('./fraction');

let stocks = exports;

let stockList = new Map();
let count = 0;

stocks.interiorList = [
    [1104.6878662109375, -3099.449462890625, -39.999916076660156, 88.8323745727539, 1101.0675048828125, -3099.64697265625, -39.34011459350586, 91.2125244140625], //0
    [1072.5458984375, -3102.49755859375, -39.99995422363281, 93.9716567993164, 1071.10302734375, -3103.2294921875, -39.2861328125, 359.570556640625], //1
    [1027.242431640625, -3101.391357421875, -39.999900817871094, 89.16166687011719, 1022.7654418945312, -3101.543701171875, -39.33993911743164, 178.99444580078125], //2
];

stocks.pcList = [
    [1088.6097412109375, -3101.404541015625, -39.999942779541016], //0
    [1049.1907958984375, -3100.739013671875, -39.99993133544922], //1
    [994.3892822265625, -3099.96142578125, -39.995849609375], //2
];

stocks.openCase = {
    3: [
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 71, 71, 71, 71, 71, 71, 71, 71, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 295, 295, 295, 295, 296, 296, 296, 296, 71, 71, 71, 71, 71, 71, 71, 71, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 295, 295, 295, 295, 296, 296, 296, 296],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 71, 71, 71, 71, 71, 71, 71, 71, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 295, 295, 295, 295, 296, 296, 296, 296, 71, 71, 71, 71, 71, 71, 71, 71, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 295, 295, 295, 295, 296, 296, 296, 296],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 71, 71, 71, 71, 71, 71, 71, 71, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 295, 295, 295, 295, 296, 296, 296, 296, 71, 71, 71, 71, 71, 71, 71, 71, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 295, 295, 295, 295, 296, 296, 296, 296],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 71, 71, 71, 71, 71, 71, 71, 71, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 295, 295, 295, 295, 296, 296, 296, 296, 71, 71, 71, 71, 71, 71, 71, 71, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 295, 295, 295, 295, 296, 296, 296, 296],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 78, 78, 78, 78, 78, 78, 78, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 314, 314, 314, 314, 314, 314, 314, 78, 78, 78, 78, 78, 78, 78, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 314, 314, 314, 314, 314, 314, 314],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 78, 78, 78, 78, 78, 78, 78, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 314, 314, 314, 314, 314, 314, 314, 78, 78, 78, 78, 78, 78, 78, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 314, 314, 314, 314, 314, 314, 314],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 78, 78, 78, 78, 78, 78, 78, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 314, 314, 314, 314, 314, 314, 314, 78, 78, 78, 78, 78, 78, 78, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 314, 314, 314, 314, 314, 314, 314],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 78, 78, 78, 78, 78, 78, 78, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 314, 314, 314, 314, 314, 314, 314, 78, 78, 78, 78, 78, 78, 78, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 314, 314, 314, 314, 314, 314, 314],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 146, 146, 146, 146, 280, 280, 280, 280, 280, 280, 280, 280, 316, 316, 316, 316, 146, 146, 146, 146, 280, 280, 280, 280, 280, 280, 280, 280, 316, 316, 316, 316],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 146, 146, 146, 146, 280, 280, 280, 280, 280, 280, 280, 280, 316, 316, 316, 316, 146, 146, 146, 146, 280, 280, 280, 280, 280, 280, 280, 280, 316, 316, 316, 316],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 146, 146, 146, 146, 280, 280, 280, 280, 280, 280, 280, 280, 316, 316, 316, 316, 146, 146, 146, 146, 280, 280, 280, 280, 280, 280, 280, 280, 316, 316, 316, 316],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 146, 146, 146, 146, 280, 280, 280, 280, 280, 280, 280, 280, 316, 316, 316, 316, 146, 146, 146, 146, 280, 280, 280, 280, 280, 280, 280, 280, 316, 316, 316, 316],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 73, 73, 286, 286, 286, 286, 302, 301, 73, 73, 286, 286, 286, 286, 302, 301],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 73, 73, 286, 286, 286, 286, 302, 301, 73, 73, 286, 286, 286, 286, 302, 301],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 73, 73, 286, 286, 286, 286, 302, 301, 73, 73, 286, 286, 286, 286, 302, 301],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 73, 73, 286, 286, 286, 286, 302, 301, 73, 73, 286, 286, 286, 286, 302, 301],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 99, 99, 99, 99, 99, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 337, 337, 337, 337, 337, 99, 99, 99, 99, 99, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 337, 337, 337, 337, 337],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 99, 99, 99, 99, 99, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 337, 337, 337, 337, 337, 99, 99, 99, 99, 99, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 337, 337, 337, 337, 337],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 99, 99, 99, 99, 99, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 337, 337, 337, 337, 337, 99, 99, 99, 99, 99, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 337, 337, 337, 337, 337],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 99, 99, 99, 99, 99, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 337, 337, 337, 337, 337, 99, 99, 99, 99, 99, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 337, 337, 337, 337, 337],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 104, 104, 104, 104, 280, 280, 280, 280, 280, 280, 280, 280, 331, 331, 331, 331, 104, 104, 104, 104, 280, 280, 280, 280, 280, 280, 280, 280, 331, 331, 331, 331],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 104, 104, 104, 104, 280, 280, 280, 280, 280, 280, 280, 280, 331, 331, 331, 331, 104, 104, 104, 104, 280, 280, 280, 280, 280, 280, 280, 280, 331, 331, 331, 331],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 104, 104, 104, 104, 280, 280, 280, 280, 280, 280, 280, 280, 331, 331, 331, 331, 104, 104, 104, 104, 280, 280, 280, 280, 280, 280, 280, 280, 331, 331, 331, 331],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 104, 104, 104, 104, 280, 280, 280, 280, 280, 280, 280, 280, 331, 331, 331, 331, 104, 104, 104, 104, 280, 280, 280, 280, 280, 280, 280, 280, 331, 331, 331, 331],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 101, 101, 101, 280, 280, 280, 280, 280, 280, 317, 318, 319, 101, 101, 101, 280, 280, 280, 280, 280, 280, 317, 318, 319],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 101, 101, 101, 280, 280, 280, 280, 280, 280, 317, 318, 319, 101, 101, 101, 280, 280, 280, 280, 280, 280, 317, 318, 319],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 101, 101, 101, 280, 280, 280, 280, 280, 280, 317, 318, 319, 101, 101, 101, 280, 280, 280, 280, 280, 280, 317, 318, 319],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 101, 101, 101, 280, 280, 280, 280, 280, 280, 317, 318, 319, 101, 101, 101, 280, 280, 280, 280, 280, 280, 317, 318, 319],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 102, 102, 280, 280, 280, 280, 280, 280, 102, 102, 280, 280, 280, 280, 280, 280],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 102, 102, 280, 280, 280, 280, 280, 280, 102, 102, 280, 280, 280, 280, 280, 280],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 102, 102, 280, 280, 280, 280, 280, 280, 102, 102, 280, 280, 280, 280, 280, 280],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 102, 102, 280, 280, 280, 280, 280, 280, 102, 102, 280, 280, 280, 280, 280, 280],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 98, 98, 282, 282, 282, 282, 282, 282, 98, 98, 282, 282, 282, 282, 282, 282],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 98, 98, 282, 282, 282, 282, 282, 282, 98, 98, 282, 282, 282, 282, 282, 282],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 87, 87, 87, 281, 281, 281, 281, 281, 281, 87, 87, 87, 281, 281, 281, 281, 281, 281],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 87, 87, 87, 281, 281, 281, 281, 281, 281, 87, 87, 87, 281, 281, 281, 281, 281, 281],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 87, 87, 87, 281, 281, 281, 281, 281, 281, 87, 87, 87, 281, 281, 281, 281, 281, 281],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 87, 87, 87, 281, 281, 281, 281, 281, 281, 87, 87, 87, 281, 281, 281, 281, 281, 281],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 92, 92, 92, 281, 281, 281, 281, 281, 281, 92, 92, 92, 281, 281, 281, 281, 281, 281],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 92, 92, 92, 281, 281, 281, 281, 281, 281, 92, 92, 92, 281, 281, 281, 281, 281, 281],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 92, 92, 92, 281, 281, 281, 281, 281, 281, 92, 92, 92, 281, 281, 281, 281, 281, 281],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 92, 92, 92, 281, 281, 281, 281, 281, 281, 92, 92, 92, 281, 281, 281, 281, 281, 281],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 74, 287, 287, 74, 287, 287],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 74, 287, 287, 74, 287, 287],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 74, 287, 287, 74, 287, 287],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 74, 287, 287, 74, 287, 287],
    ],
    4: [
        [5, 5, 5, 5, 5, 5, 5, 5, 71, 71, 71, 71, 71, 71, 71, 71, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 295, 295, 295, 295, 296, 296, 296, 296],
        [5, 5, 5, 5, 5, 5, 5, 5, 71, 71, 71, 71, 71, 71, 71, 71, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 295, 295, 295, 295, 295, 295, 295, 295],
        [5, 5, 5, 5, 5, 5, 5, 5, 71, 71, 71, 71, 71, 71, 71, 71, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 296, 296, 296, 296, 296, 296, 296, 296],
        [5, 5, 5, 5, 5, 5, 5, 5, 71, 71, 71, 71, 71, 71, 71, 71, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 295, 295, 295, 295, 296, 296, 296, 296],
        [5, 5, 5, 5, 5, 5, 5, 5, 78, 78, 78, 78, 78, 78, 78, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 311, 311, 311, 311, 311, 311, 311],
        [5, 5, 5, 5, 5, 5, 5, 5, 78, 78, 78, 78, 78, 78, 78, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 312, 312, 312, 312, 312, 312, 312],
        [5, 5, 5, 5, 5, 5, 5, 5, 78, 78, 78, 78, 78, 78, 78, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 313, 313, 313, 313, 313, 313, 313],
        [5, 5, 5, 5, 5, 5, 5, 5, 78, 78, 78, 78, 78, 78, 78, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 314, 314, 314, 314, 314, 314, 314],
        [5, 5, 5, 5, 5, 5, 5, 5, 146, 146, 146, 146, 280, 280, 280, 280, 280, 280, 280, 280, 316, 316, 316, 316],
        [5, 5, 5, 5, 5, 5, 5, 5, 146, 146, 146, 146, 280, 280, 280, 280, 280, 280, 280, 280, 316, 316, 316, 316],
        [5, 5, 5, 5, 5, 5, 5, 5, 146, 146, 146, 146, 280, 280, 280, 280, 280, 280, 280, 280, 316, 316, 316, 316],
        [5, 5, 5, 5, 5, 5, 5, 5, 146, 146, 146, 146, 280, 280, 280, 280, 280, 280, 280, 280, 316, 316, 316, 316],
        [5, 5, 5, 5, 5, 5, 5, 5, 73, 73, 286, 286, 286, 286, 301, 301],
        [5, 5, 5, 5, 5, 5, 5, 5, 73, 73, 286, 286, 286, 286, 302, 302],
        [5, 5, 5, 5, 5, 5, 5, 5, 73, 73, 286, 286, 286, 286, 301, 302],
        [5, 5, 5, 5, 5, 5, 5, 5, 73, 73, 286, 286, 286, 286, 302, 301],
        [5, 5, 5, 5, 5, 5, 5, 5, 99, 99, 99, 99, 99, 280, 280, 280, 280, 280, 280, 280, 280, 337, 337, 337, 337, 337],
        [5, 5, 5, 5, 5, 5, 5, 5, 99, 99, 99, 99, 99, 280, 280, 280, 280, 280, 280, 280, 280, 337, 337, 337, 337, 337],
        [5, 5, 5, 5, 5, 5, 5, 5, 99, 99, 99, 99, 99, 280, 280, 280, 280, 280, 280, 280, 280, 337, 337, 337, 337, 337],
        [5, 5, 5, 5, 5, 5, 5, 5, 99, 99, 99, 99, 99, 280, 280, 280, 280, 280, 280, 280, 280, 337, 337, 337, 337, 337],
        [5, 5, 5, 5, 5, 5, 5, 5, 104, 104, 104, 104, 280, 280, 280, 280, 280, 280, 329, 329, 329, 329],
        [5, 5, 5, 5, 5, 5, 5, 5, 104, 104, 104, 104, 280, 280, 280, 280, 280, 280, 326, 326, 326, 326],
        [5, 5, 5, 5, 5, 5, 5, 5, 104, 104, 104, 104, 280, 280, 280, 280, 280, 280, 333, 333, 333, 333],
        [5, 5, 5, 5, 5, 5, 5, 5, 104, 104, 104, 104, 280, 280, 280, 280, 280, 280, 331, 331, 331, 331],
        [5, 5, 5, 5, 5, 5, 5, 5, 101, 101, 101, 280, 280, 280, 280, 317, 317, 317],
        [5, 5, 5, 5, 5, 5, 5, 5, 101, 101, 101, 280, 280, 280, 280, 318, 318, 318],
        [5, 5, 5, 5, 5, 5, 5, 5, 101, 101, 101, 280, 280, 280, 280, 319, 319, 319],
        [5, 5, 5, 5, 5, 5, 5, 5, 101, 101, 101, 280, 280, 280, 280, 317, 318, 319],
        [5, 5, 5, 5, 5, 5, 5, 5, 102, 102, 280, 280, 280, 280],
        [5, 5, 5, 5, 5, 5, 5, 5, 102, 102, 280, 280, 280, 280],
        [5, 5, 5, 5, 5, 5, 5, 5, 102, 102, 280, 280, 280, 280],
        [5, 5, 5, 5, 5, 5, 5, 5, 102, 102, 280, 280, 280, 280],
        [5, 5, 5, 5, 5, 5, 5, 5, 87, 87, 87, 281, 281, 281, 281],
        [5, 5, 5, 5, 5, 5, 5, 5, 87, 87, 87, 281, 281, 281, 281],
        [5, 5, 5, 5, 5, 5, 5, 5, 87, 87, 87, 281, 281, 281, 281],
        [5, 5, 5, 5, 5, 5, 5, 5, 87, 87, 87, 281, 281, 281, 281],
        [5, 5, 5, 5, 5, 5, 5, 5, 92, 92, 92, 281, 281, 281, 281],
        [5, 5, 5, 5, 5, 5, 5, 5, 92, 92, 92, 281, 281, 281, 281],
        [5, 5, 5, 5, 5, 5, 5, 5, 92, 92, 92, 281, 281, 281, 281],
        [5, 5, 5, 5, 5, 5, 5, 5, 92, 92, 92, 281, 281, 281],
        [5, 5, 5, 5, 5, 5, 5, 5, 74, 287],
        [5, 5, 5, 5, 5, 5, 5, 5, 74, 287],
        [5, 5, 5, 5, 5, 5, 5, 5, 74, 287],
        [5, 5, 5, 5, 5, 5, 5, 5, 74, 287],
    ],
    38: [
        [158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158],
        [159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159],
        [160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160],
        [161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161],
        [162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162],
    ],
    39: [
        [158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158],
        [159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159],
        [160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160],
        [161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161],
        [162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162],
    ],
    50: [
        [103, 103, 103, 103, 103, 103, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 320, 320, 320, 320, 320, 320],
        [103, 103, 103, 103, 103, 103, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 321, 321, 321, 321, 321, 321],
        [103, 103, 103, 103, 103, 103, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 320, 320, 320, 321, 321, 321],
        [103, 103, 103, 103, 103, 103, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 321, 321, 321, 320, 320, 320],
        [94, 94, 94, 94, 94, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 322, 322, 322, 322, 322],
        [94, 94, 94, 94, 94, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 323, 323, 323, 323, 323],
        [94, 94, 94, 94, 94, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 324, 324, 324, 324, 324],
        [94, 94, 94, 94, 94, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 322, 323, 323, 324, 324],
        [97, 97, 97, 97, 280, 280, 280, 280, 280, 280, 280, 280, 338, 338, 338, 338],
        [97, 97, 97, 97, 280, 280, 280, 280, 280, 280, 280, 280, 339, 339, 339, 339],
        [97, 97, 97, 97, 280, 280, 280, 280, 280, 280, 280, 280, 340, 340, 340, 340],
        [97, 97, 97, 97, 280, 280, 280, 280, 280, 280, 280, 280, 338, 339, 339, 340],
        [90, 90, 90, 90, 90, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 341, 341, 341, 341, 341],
        [90, 90, 90, 90, 90, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 342, 342, 342, 341, 341],
        [90, 90, 90, 90, 90, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 341, 341, 342, 342, 342],
        [90, 90, 90, 90, 90, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 342, 342, 342, 342, 342],
        [91, 91, 91, 91, 281, 281, 281, 281, 281, 281, 281, 281, 349, 349, 349, 349],
        [91, 91, 91, 91, 281, 281, 281, 281, 281, 281, 281, 281, 350, 350, 350, 350],
        [91, 91, 91, 91, 281, 281, 281, 281, 281, 281, 281, 281, 353, 353, 353, 353],
        [91, 91, 91, 91, 281, 281, 281, 281, 281, 281, 281, 281, 354, 354, 354, 354],
        [86, 86, 86, 281, 281, 281, 281, 281, 281, 346, 346, 346],
        [86, 86, 86, 281, 281, 281, 281, 281, 281, 347, 347, 347],
        [86, 86, 86, 281, 281, 281, 281, 281, 281, 348, 348, 348],
        [86, 86, 86, 281, 281, 281, 281, 281, 281, 346, 347, 348],
        [106, 106, 106, 106, 284, 284, 284, 284, 284, 284, 284, 284, 358, 358, 358, 358],
        [106, 106, 106, 106, 284, 284, 284, 284, 284, 284, 284, 284, 359, 359, 359, 359],
        [106, 106, 106, 106, 284, 284, 284, 284, 284, 284, 284, 284, 360, 360, 360, 360],
        [106, 106, 106, 106, 284, 284, 284, 284, 284, 284, 284, 284, 361, 361, 361, 361],
        [107, 107, 282, 282, 282, 282, 404, 404, 409, 409],
        [107, 107, 282, 282, 282, 282, 405, 405, 410, 410],
        [107, 107, 282, 282, 282, 282, 406, 406, 411, 411],
        [107, 107, 282, 282, 282, 282, 407, 407, 415, 415],
        [112, 112, 112, 283, 283, 283, 283, 283, 283, 283, 283, 283],
        [112, 112, 112, 283, 283, 283, 283, 283, 283, 283, 283, 283],
        [112, 112, 112, 283, 283, 283, 283, 283, 283, 283, 283, 283],
        [112, 112, 112, 283, 283, 283, 283, 283, 283, 283, 283, 283],
        [105, 105, 105, 284, 284, 284, 284, 284, 284, 366, 366, 366],
        [105, 105, 105, 284, 284, 284, 284, 284, 284, 367, 367, 367],
        [105, 105, 105, 284, 284, 284, 284, 284, 284, 368, 368, 368],
        [105, 105, 105, 284, 284, 284, 284, 284, 284, 366, 367, 368],
        [108, 108, 108, 108, 284, 284, 284, 284, 284, 284, 284, 284, 373, 373, 373, 373],
        [108, 108, 108, 108, 284, 284, 284, 284, 284, 284, 284, 284, 374, 374, 374, 374],
        [108, 108, 108, 108, 284, 284, 284, 284, 284, 284, 284, 284, 375, 375, 375, 375],
        [108, 108, 108, 108, 284, 284, 284, 284, 284, 284, 284, 284, 376, 376, 376, 376],
        [109, 109, 284, 284, 284, 284, 378, 378, 383, 383],
        [109, 109, 284, 284, 284, 284, 379, 379, 384, 384],
        [109, 109, 284, 284, 284, 284, 380, 380, 385, 385],
        [109, 109, 284, 284, 284, 284, 381, 381, 389, 389],
        [74, 74, 74, 74, 287, 287, 287, 287],
        [74, 74, 74, 74, 287, 287, 287, 287],
        [74, 74, 74, 74, 287, 287, 287, 287],
        [74, 74, 74, 74, 287, 287, 287, 287],
        [75, 287, 287, 304, 305, 306],
        [119, 282, 282, 443, 444],
    ],
    51: [
        [49, 474],
    ],
    53: [
        [49, 474],
    ],
    52: [
        [262, 262, 262, 262, 262, 474],
    ],
};

//Имя, Model, Объем, OffsetZ, Можно ли юзать, Цена
stocks.boxList = [
    ['Малая коробка', 1165008631, 400000, -0.12, true, 10000, 'Стандарт', -1], //0
    ['Средняя коробка', 1875981008, 600000, -0.12, true, 20000, 'Стандарт', -1], //1
    ['Большая коробка', -1322183878, 800000, -0.12, true, 30000, 'Стандарт', -1], //2

    ['Большой ящик с оружием', 1790162299, 3, 0, false, 80000, 'Оружие и патроны', 1], //3
    ['Малый ящик с оружием', 2055492359, 4, 0, false, 30000, 'Оружие и патроны', 0], //4
    ['Большой ящик антиквариата', 1815664890, 5, 0, false, 15000, 'Антиквариат', 1], //5
    ['Малый ящик антиквариата', 1397410834, 5, 0, false, 5000, 'Антиквариат', 0], //6
    ['Большой ящик антиквариата', 1057918179, 6, 0, false, 15000, 'Антиквариат', 1], //7
    ['Малый ящик антиквариата', -1655753417, 7, 0, false, 5000, 'Антиквариат', 0 ], //8
    ['Большой ящик химикатов', 21331302, 8, 0, false, 15000, 'Химикаты', 1 ], //9
    ['Малый ящик химикатов', 1075102988, 9, 0, false, 5000, 'Химикаты', 0 ], //10
    ['Большой ящик серебра', 2014503631, 10, 0, false, 15000, 'Контрафактные товары', 1 ], //11
    ['Малый ящик серебра', -333302011, 11, 0, false, 5000, 'Контрафактные товары', 0 ], //12
    ['Малый ящик медикаментов', 2092857693, 12, 0, false, 5000, 'Медикаменты', 0 ], //13
    ['Ящик сигарет Redwood', -1958, 14, 0, false, 5000, 'Алкоголь и табак', 0 ], //14
    ['Ящик сигарет Redwood', -1958, 14, 0, false, 5000, 'Алкоголь и табак', 0 ], //15
    ['Большой ящик кожаных сумок', 12824223, 15, 0, false, 15000, 'Трофеи браконьеров', 1 ], //16
    ['Малый ящик кожаных сумок', -270239139, 16, 0, false, 5000, 'Трофеи браконьеров', 0 ], //17
    ['Большой ящик техники', 60045683, 17, 0, false, 15000, 'Контрафактные товары', 1 ], //18
    ['Малый ящик техники', -731494164, 18, 0, false, 5000, 'Контрафактные товары', 0 ], //19
    ['Большой ящик взрывчатки', -1853019218, 19, 0, false, 15000, 'Оружие и патроны', 1 ], //20
    ['Малый ящик взрывчатки', -305076648, 20, 0, false, 5000, 'Оружие и патроны', 0 ], //21
    ['Редкая киноплёнка', 725420132, 21, 0, false, 30000, 'Уникальный груз', 2 ], //22
    ['Большой ящик меховых шуб', -1227143673, 22, -0.12, false, 15000, 'Трофеи браконьеров', 1 ], //23
    ['Малый ящик меховых шуб', 1915002422, 23, -0.12, false, 5000, 'Трофеи браконьеров', 0 ], //24
    ['Большой ящик драгоценных камней', 654562429, 24, 0, false, 15000, 'Ювелирные украшения', 1 ], //25
    ['Малый ящик драгоценных камней', 304821544, 25, 0, false, 5000, 'Ювелирные украшения', 0 ], //26
    ['Большой ящик лекарств', -1129076059, 26, 0, false, 15000, 'Медикаменты', 1 ], //27
    ['Малый ящик лекарств', 1524744766, 27, 0, false, 5000, 'Медикаменты', 0 ], //28
    ['Большой ящик украшений', -76137332, 28, 0, false, 15000, 'Ювелирные украшения', 1 ], //29
    ['Малый ящик украшений', -290560280, 29, 0, false, 5000, 'Ювелирные украшения', 0 ], //30
    ['Большой ящик с часами', -1817226762, 30, 0, false, 15000, 'Ювелирные украшения', 1 ], //31
    ['Малый ящик с часами', -2104190829, 31, 0, false, 5000, 'Ювелирные украшения', 0 ], //32
    ['Большой ящик лекарств', 797797701, 32, 0, false, 15000, 'Медикаменты', 1 ], //33
    ['Малый ящик лекарств', 1054352436, 33, 0, false, 5000, 'Медикаменты', 0 ], //34
    ['Золотой Minigun', 1557324266, 34, 0, false, 40000, 'Уникальный груз', 2 ], //35
    ['Большой ящик фальшивых купюр', -80652213, 35, 0, false, 15000, 'Контрафактные товары', 1 ], //36
    ['Малый ящик фальшивых купюр', -1155316904, 36, 0, false, 5000, 'Контрафактные товары', 0 ], //37
    ['Большой ящик наркотиков', 1016837103, 37, 0, false, 40000, 'Наркотики', 1 ], //38
    ['Малый ящик наркотиков', 1863514296, 38, 0, false, 20000, 'Наркотики', 0 ], //39
    ['Яйцо фаберже', 562429577, 39, 0, false, 35000, 'Уникальный груз', 2 ], //40
    ['Большой ящик лекарств', 1914690987, 40, -0.12, false, 15000, 'Медикаменты', 1 ], //41
    ['Малый ящик лекарств', -824154829, 41, 0, false, 5000, 'Медикаменты', 0 ], //42
    ['Костюм Етти', -495810123, 42, 0, false, 25000, 'Уникальный груз', 2 ], //43
    ['Большой ящик алкоголя и табака', -19283505, 43, -0.12, false, 15000, 'Алкоголь и табак', 1 ], //44
    ['Малый ящик алкоголя и табака', -2073232532, 44, -0.12, false, 5000, 'Алкоголь и табак', 0 ], //45
    ['Золотой компас', 577983279, 45, 0, false, 35000, 'Уникальный груз', 2 ], //46
    ['Большой ящик слоновых бивней', -2033482115, 46, -0.12, false, 15000, 'Трофеи браконьеров', 1 ], //47
    ['Малый ящик слоновых бивней', 588496643, 47, -0.12, false, 5000, 'Трофеи браконьеров', 0 ], //48
    ['Бриллиант 64 карата', 926762619, 48, 0, false, 50000, 'Уникальный груз', 2 ], //49
    ['Оружейный ящик MerryWeather', -994309865, 49, 0, false, 100000, 'Оружие и патроны', 2 ], //50
    ['Ящик с документами банков Fleeca', -994309865, 50, 0, false, 100000, 'Уникальный груз', 3 ], //51
    ['Ящик с C4', -1853019218, 51, 0, false, 200000, 'Оружие и патроны', 3 ], //52
    ['Ящик с документами банка Pacific', -994309865, 50, 0, false, 200000, 'Уникальный груз', 3 ], //53
];

stocks.boxPosList = [
    [
        [1088.75, -3096.7, -39.88, 0, 0, 0],
        [1088.757, -3096.428, -37.66, 0, 0, 0],
        [1091.3, -3096.7, -39.88, 0, 0, 0],
        [1091.3, -3096.7, -37.66, 0, 0, 0],
        [1095.05, -3096.7, -39.88, 0, 0, 0],
        [1095.05, -3096.7, -37.66, 0, 0, 0],
        [1097.6, -3096.7, -39.88, 0, 0, 0],
        [1097.6, -3096.7, -37.66, 0, 0, 0],
        [1101.3, -3096.7, -39.88, 0, 0, 0],
        [1101.3, -3096.7, -37.66, 0, 0, 0],
        [1103.8, -3096.7, -39.88, 0, 0, 0],
        [1103.8, -3096.7, -37.66, 0, 0, 0],
    ],
    [
        [1053.1, -3095.6, -39.88, 0, 0, 0],
        [1053.1, -3095.6, -37.66, 0, 0, 0],
        [1055.5, -3095.6, -39.88, 0, 0, 0],
        [1055.5, -3095.6, -37.66, 0, 0, 0],
        [1057.9, -3095.6, -39.88, 0, 0, 0],
        [1057.9, -3095.6, -37.66, 0, 0, 0],
        [1060.3, -3095.6, -39.88, 0, 0, 0],
        [1060.3, -3095.6, -37.66, 0, 0, 0],
        [1062.7, -3095.6, -39.88, 0, 0, 0],
        [1062.7, -3095.6, -37.66, 0, 0, 0],
        [1065.1, -3095.6, -39.88, 0, 0, 0],
        [1065.1, -3095.6, -37.66, 0, 0, 0],
        [1067.6, -3095.6, -39.88, 0, 0, 0],
        [1067.6, -3095.6, -37.66, 0, 0, 0],
        [1053.1, -3102.9, -39.88, 0, 0, 0],
        [1053.1, -3102.9, -37.66, 0, 0, 0],
        [1055.5, -3102.9, -39.88, 0, 0, 0],
        [1055.5, -3102.9, -37.66, 0, 0, 0],
        [1057.9, -3102.9, -39.88, 0, 0, 0],
        [1057.9, -3102.9, -37.66, 0, 0, 0],
        [1060.3, -3102.9, -39.88, 0, 0, 0],
        [1060.3, -3102.9, -37.66, 0, 0, 0],
        [1062.7, -3102.9, -39.88, 0, 0, 0],
        [1062.7, -3102.9, -37.66, 0, 0, 0],
        [1065.1, -3102.9, -39.88, 0, 0, 0],
        [1065.1, -3102.9, -37.66, 0, 0, 0],
        [1067.6, -3102.9, -39.88, 0, 0, 0],
        [1067.6, -3102.9, -37.66, 0, 0, 0],
        [1053.1, -3109.7, -39.88, 1.001779E-05, -5.008956E-06, -179.9985],
        [1053.1, -3109.7, -37.66, 1.001779E-05, -5.008955E-06, -179.9985],
        [1055.5, -3109.7, -39.88, 1.001779E-05, -5.008955E-06, -179.9985],
        [1055.5, -3109.7, -37.66, 1.001779E-05, -5.008955E-06, -179.9985],
        [1057.9, -3109.7, -39.88, 1.001779E-05, -5.008955E-06, -179.9985],
        [1057.9, -3109.7, -37.66, 1.001779E-05, -5.008955E-06, -179.9985],
        [1060.3, -3109.7, -39.88, 1.001779E-05, -5.008955E-06, -179.9985],
        [1060.3, -3109.7, -37.66, 1.001779E-05, -5.008955E-06, -179.9985],
        [1062.7, -3109.7, -39.88, 1.001779E-05, -5.008955E-06, -179.9985],
        [1062.7, -3109.7, -37.66, 1.001779E-05, -5.008955E-06, -179.9985],
        [1065.1, -3109.7, -39.88, 1.001779E-05, -5.008955E-06, -179.9985],
        [1065.1, -3109.7, -37.66, 1.001779E-05, -5.008955E-06, -179.9985],
        [1067.6, -3109.7, -39.88, 1.001779E-05, -5.008955E-06, -179.9985],
        [1067.6, -3109.7, -37.66, 1.001779E-05, -5.008955E-06, -179.9985],
    ],
    [
        [993.4, -3111.302, -39.88, -4.46236E-05, 2.231179E-05, 89.99999],
        [993.4, -3111.302, -37.66, -4.462359E-05, 2.231178E-05, 89.99998],
        [993.4, -3108.9, -39.88, -4.462359E-05, 2.231178E-05, 89.99998],
        [993.4, -3108.9, -37.66, -4.462359E-05, 2.231176E-05, 89.99995],
        [993.4, -3106.5, -39.88, -4.462359E-05, 2.231176E-05, 89.99995],
        [993.4, -3106.5, -37.66, -4.462358E-05, 2.231174E-05, 89.99993],
        [1003.65, -3091.8, -39.88, 0, 0, 0],
        [1003.65, -3091.8, -37.66, 0, 0, 0],
        [1006.05, -3091.8, -39.88, 0, 0, 0],
        [1006.05, -3091.8, -37.66, 0, 0, 0],
        [1008.45, -3091.8, -39.88, 0, 0, 0],
        [1008.45, -3091.8, -37.66, 0, 0, 0],
        [1010.85, -3091.8, -39.88, 0, 0, 0],
        [1010.85, -3091.8, -37.66, 0, 0, 0],
        [1013.25, -3091.8, -39.88, 0, 0, 0],
        [1013.25, -3091.8, -37.66, 0, 0, 0],
        [1015.7, -3091.8, -39.88, 0, 0, 0],
        [1015.7, -3091.8, -37.66, 0, 0, 0],
        [1018.15, -3091.8, -39.88, 0, 0, 0],
        [1018.15, -3091.8, -37.66, 0, 0, 0],
        [1003.65, -3096.7, -39.88, 5.008956E-06, -5.008956E-06, -180],
        [1003.65, -3096.7, -37.66, 5.008956E-06, -5.008956E-06, -180],
        [1006.05, -3096.7, -39.88, 5.008956E-06, -5.008956E-06, -180],
        [1006.05, -3096.7, -37.66, 5.008956E-06, -5.008956E-06, -180],
        [1008.45, -3096.7, -39.88, 5.008956E-06, -5.008956E-06, -180],
        [1008.45, -3096.7, -37.66, 5.008956E-06, -5.008956E-06, -180],
        [1010.85, -3096.7, -39.88, 5.008956E-06, -5.008956E-06, -180],
        [1010.85, -3096.7, -37.66, 5.008956E-06, -5.008956E-06, -180],
        [1013.25, -3096.7, -39.88, 5.008956E-06, -5.008956E-06, -180],
        [1013.25, -3096.7, -37.66, 5.008956E-06, -5.008956E-06, -180],
        [1015.7, -3096.7, -39.88, 5.008956E-06, -5.008956E-06, -180],
        [1015.7, -3096.7, -37.66, 5.008956E-06, -5.008956E-06, -180],
        [1018.15, -3096.7, -39.88, 5.008956E-06, -5.008956E-06, -180],
        [1018.15, -3096.7, -37.66, 5.008956E-06, -5.008956E-06, -180],
        [1003.65, -3103, -39.88, 0, 0, 0],
        [1003.65, -3103, -37.66, 0, 0, 0],
        [1006.05, -3103, -39.88, 0, 0, 0],
        [1006.05, -3103, -37.66, 0, 0, 0],
        [1008.45, -3103, -39.88, 0, 0, 0],
        [1008.45, -3103, -37.66, 0, 0, 0],
        [1010.85, -3103, -39.88, 0, 0, 0],
        [1010.85, -3103, -37.66, 0, 0, 0],
        [1013.25, -3103, -39.88, 0, 0, 0],
        [1013.25, -3103, -37.66, 0, 0, 0],
        [1015.7, -3103, -39.88, 0, 0, 0],
        [1015.7, -3103, -37.66, 0, 0, 0],
        [1018.15, -3103, -39.88, 0, 0, 0],
        [1018.15, -3103, -37.66, 0, 0, 0],
        [1003.65, -3108.3, -39.88, 5.008956E-06, -5.008956E-06, -180],
        [1003.65, -3108.3, -37.66, 5.008956E-06, -5.008956E-06, -180],
        [1006.05, -3108.3, -39.88, 5.008956E-06, -5.008956E-06, -180],
        [1006.05, -3108.3, -37.66, 5.008956E-06, -5.008956E-06, -180],
        [1008.45, -3108.3, -39.88, 5.008956E-06, -5.008956E-06, -180],
        [1008.45, -3108.3, -37.66, 5.008956E-06, -5.008956E-06, -180],
        [1010.85, -3108.3, -39.88, 5.008956E-06, -5.008956E-06, -180],
        [1010.85, -3108.3, -37.66, 5.008956E-06, -5.008956E-06, -180],
        [1013.25, -3108.3, -39.88, 5.008956E-06, -5.008956E-06, -180],
        [1013.25, -3108.3, -37.66, 5.008956E-06, -5.008956E-06, -180],
        [1015.7, -3108.3, -39.88, 5.008956E-06, -5.008956E-06, -180],
        [1015.7, -3108.3, -37.66, 5.008956E-06, -5.008956E-06, -180],
        [1018.15, -3108.3, -39.88, 5.008956E-06, -5.008956E-06, -180],
        [1018.15, -3108.3, -37.66, 5.008956E-06, -5.008956E-06, -180],
        [1026.7, -3106.5, -39.88, -4.46236E-05, -6.329292E-05, -89.99999],
        [1026.65, -3106.5, -37.66, -4.46236E-05, -6.329291E-05, -89.99998],
        [1026.7, -3108.9, -39.88, -4.46236E-05, -6.329291E-05, -89.99998],
        [1026.7, -3108.9, -37.66, -4.462361E-05, -6.329288E-05, -89.99995],
        [1026.7, -3111.3, -39.88, -4.462361E-05, -6.329288E-05, -89.99995],
        [1026.7, -3111.3, -37.66, -4.462361E-05, -6.329285E-05, -89.99993],
        [1026.7, -3096.4, -39.88, -4.46236E-05, -6.329291E-05, -89.99998],
        [1026.7, -3096.4, -37.65501, -4.462361E-05, -6.329288E-05, -89.99995],
        [1026.7, -3094, -39.88, -4.462361E-05, -6.329288E-05, -89.99995],
        [1026.7, -3094, -37.66, -4.462361E-05, -6.329285E-05, -89.99993],
        [1026.7, -3091.6, -39.88, -4.462361E-05, -6.329285E-05, -89.99993],
        [1026.7, -3091.6, -37.66, -4.462362E-05, -6.329282E-05, -89.99989],
    ]
];

stocks.types = [
    'Малый',
    'Средний',
    'Большой',
];

stocks.loadAll = function() {
    methods.debug('stocks.loadAll');

    mysql.executeQuery(`SELECT * FROM stocks`, function (err, rows, fields) {
        rows.forEach(function(item) {

            try {

                let upgradeNew = item['upgrade'];
                let lengthBoxes = stocks.boxPosList[item['interior']].length;
                let lengthCurrent = item['upgrade'].split('_').length;
                if (lengthBoxes !== lengthCurrent) {
                    for (let i = 0; i < lengthBoxes - lengthCurrent; i++)
                        upgradeNew += '_-1';
                }

                stocks.set(item['id'], 'id', item['id']);
                stocks.set(item['id'], 'number', item['number']);
                stocks.set(item['id'], 'address', item['address']);
                stocks.set(item['id'], 'street', item['street']);
                stocks.set(item['id'], 'price', item['price']);
                stocks.set(item['id'], 'user_id', item['user_id']);
                stocks.set(item['id'], 'user_name', item['user_name']);
                stocks.set(item['id'], 'pin', item['pin']);
                stocks.set(item['id'], 'pin1', item['pin1']);
                stocks.set(item['id'], 'pin2', item['pin2']);
                stocks.set(item['id'], 'pin3', item['pin3']);
                stocks.set(item['id'], 'pin_o', item['pin_o']);
                stocks.set(item['id'], 'pin_l', item['pin_l']);
                stocks.set(item['id'], 'pin_b', item['pin_b']);
                stocks.set(item['id'], 'interior', item['interior']);
                stocks.set(item['id'], 'x', item['x']);
                stocks.set(item['id'], 'y', item['y']);
                stocks.set(item['id'], 'z', item['z']);
                stocks.set(item['id'], 'rot', item['rot']);
                stocks.set(item['id'], 'vx', item['vx']);
                stocks.set(item['id'], 'vy', item['vy']);
                stocks.set(item['id'], 'vz', item['vz']);
                stocks.set(item['id'], 'vrot', item['vrot']);
                stocks.set(item['id'], 'upgrade', upgradeNew);
                stocks.set(item['id'], 'upgrade_g', item['upgrade_g']);
                stocks.set(item['id'], 'upgrade_n', item['upgrade_n']);
                stocks.set(item['id'], 'upgrade_l', item['upgrade_l']);
                stocks.set(item['id'], 'upgrade_b', item['upgrade_b']);
                stocks.set(item['id'], 'lab_state', item['lab_state']);
                stocks.set(item['id'], 'lab_1_count', item['lab_1_count']);
                stocks.set(item['id'], 'lab_2_count', item['lab_2_count']);
                stocks.set(item['id'], 'lab_3_count', item['lab_3_count']);
                stocks.set(item['id'], 'lab_4_count', item['lab_4_count']);
                stocks.set(item['id'], 'lab_type', item['lab_type']);
                stocks.set(item['id'], 'bunk_type', item['bunk_type']);
                stocks.set(item['id'], 'bunk_state', item['bunk_state']);
                stocks.set(item['id'], 'bunk_1_count', item['bunk_1_count']);
                stocks.set(item['id'], 'bunk_2_count', item['bunk_2_count']);
                stocks.set(item['id'], 'bunk_3_count', item['bunk_3_count']);
                stocks.set(item['id'], 'bunk_4_count', item['bunk_4_count']);
                stocks.set(item['id'], 'tax_money', item['tax_money']);
                stocks.set(item['id'], 'tax_score', item['tax_score']);

                let hBlip = {
                    pos: new mp.Vector3(parseFloat(item['x']), parseFloat(item['y']), parseFloat(item['z'])),
                    vPos: new mp.Vector3(parseFloat(item['vx']), parseFloat(item['vy']), parseFloat(item['vz']))
                };
                methods.createCp(hBlip.pos.x, hBlip.pos.y, hBlip.pos.z, "Нажмите ~g~Е~s~ чтобы открыть меню");
                stockList.set(item['id'], hBlip);
                stocks.loadUpgrades(upgradeNew, item['id'], item['interior']);
            }
            catch (e) {
                
            }
        });
        count = rows.length;
        methods.debug('All stocks Loaded: ' + count);
    });

    stocks.interiorList.forEach(function(item) {
        let x = item[0];
        let y = item[1];
        let z = item[2];
        methods.createCp(x, y, z, "Нажмите ~g~Е~s~ чтобы открыть меню");
    });

    stocks.pcList.forEach(function(item) {
        let x = item[0];
        let y = item[1];
        let z = item[2];
        methods.createCp(x, y, z, "Нажмите ~g~Е~s~ чтобы открыть меню");
    });
};

stocks.loadLast = function() {
    methods.debug('stocks.loadLast');

    mysql.executeQuery(`SELECT * FROM stocks ORDER BY id DESC LIMIT 1`, function (err, rows, fields) {

        rows.forEach(function(item) {

            stocks.set(item['id'], 'id', item['id']);
            stocks.set(item['id'], 'number', item['number']);
            stocks.set(item['id'], 'address', item['address']);
            stocks.set(item['id'], 'street', item['street']);
            stocks.set(item['id'], 'price', item['price']);
            stocks.set(item['id'], 'user_id', item['user_id']);
            stocks.set(item['id'], 'user_name', item['user_name']);
            stocks.set(item['id'], 'pin', item['user_name']);
            stocks.set(item['id'], 'pin1', item['pin1']);
            stocks.set(item['id'], 'pin2', item['pin2']);
            stocks.set(item['id'], 'pin3', item['pin3']);
            stocks.set(item['id'], 'pin_o', item['pin_o']);
            stocks.set(item['id'], 'pin_l', item['pin_l']);
            stocks.set(item['id'], 'pin_b', item['pin_b']);
            stocks.set(item['id'], 'interior', item['interior']);
            stocks.set(item['id'], 'x', item['x']);
            stocks.set(item['id'], 'y', item['y']);
            stocks.set(item['id'], 'z', item['z']);
            stocks.set(item['id'], 'rot', item['rot']);
            stocks.set(item['id'], 'vx', item['vx']);
            stocks.set(item['id'], 'vy', item['vy']);
            stocks.set(item['id'], 'vz', item['vz']);
            stocks.set(item['id'], 'vrot', item['vrot']);
            stocks.set(item['id'], 'upgrade', item['upgrade']);
            stocks.set(item['id'], 'upgrade_g', item['upgrade_g']);
            stocks.set(item['id'], 'upgrade_n', item['upgrade_n']);
            stocks.set(item['id'], 'upgrade_l', item['upgrade_l']);
            stocks.set(item['id'], 'upgrade_b', item['upgrade_b']);
            stocks.set(item['id'], 'lab_state', item['lab_state']);
            stocks.set(item['id'], 'lab_1_count', item['lab_1_count']);
            stocks.set(item['id'], 'lab_2_count', item['lab_2_count']);
            stocks.set(item['id'], 'lab_3_count', item['lab_3_count']);
            stocks.set(item['id'], 'lab_4_count', item['lab_4_count']);
            stocks.set(item['id'], 'lab_type', item['lab_type']);
            stocks.set(item['id'], 'bunk_type', item['bunk_type']);
            stocks.set(item['id'], 'bunk_state', item['bunk_state']);
            stocks.set(item['id'], 'bunk_1_count', item['bunk_1_count']);
            stocks.set(item['id'], 'bunk_2_count', item['bunk_2_count']);
            stocks.set(item['id'], 'bunk_3_count', item['bunk_3_count']);
            stocks.set(item['id'], 'bunk_4_count', item['bunk_4_count']);
            stocks.set(item['id'], 'tax_money', item['tax_money']);
            stocks.set(item['id'], 'tax_score', item['tax_score']);

            let hBlip = {
                pos: new mp.Vector3(parseFloat(item['x']), parseFloat(item['y']), parseFloat(item['z'])),
                vPos: new mp.Vector3(parseFloat(item['vx']), parseFloat(item['vy']), parseFloat(item['vz']))
            };

            methods.createCp(hBlip.pos.x, hBlip.pos.y, hBlip.pos.z, "Нажмите ~g~Е~s~ чтобы открыть меню");
            chat.sendToAll(`Склад добавлен. ID: ${item['id']}. Name: ${item['number']}. Int: ${item['interior']}. Price: ${methods.moneyFormat(item['price'])}`);

            let id = item['id'];
            discord.sendMarketProperty(`Склад #${stocks.get(id, 'number')}`, `Адрес: ${stocks.get(id, 'address')} / ${stocks.get(id, 'street')} #${stocks.get(id, 'number')}\nГос. стоимость: ${methods.moneyFormat(stocks.get(id, 'price'))}\nТип: ${stocks.types[stocks.get(id, 'interior')]}`);

            mp.players.forEach(p => {
                methods.updateCheckpointList(p);
            });

            stockList.set(item['id'], hBlip);
        });
        count = rows.length;
        methods.debug(`Last House Loaded`);
    });
};

stocks.insert = function(player, number, street, zone, x, y, z, rot, interior, price) {
    methods.debug('stocks.insert');

    mysql.executeQuery(`INSERT INTO stocks (number, street, address, rot, x, y, z, interior, price) VALUES ('${number}', '${street}', '${zone}', '${rot}', '${x}', '${y}', '${z - 1}', '${interior}', '${price}')`);

    setTimeout(stocks.loadLast, 1000);
};

stocks.insert2 = function(player, id, vx, vy, vz, vrot) {
    methods.debug('stocks.insert2');

    stocks.set(id, 'vx', vx);
    stocks.set(id, 'vy', vy);
    stocks.set(id, 'vz', vz);
    stocks.set(id, 'vrot', vrot);

    mysql.executeQuery(`UPDATE stocks SET vrot = '${vrot}', vx = '${vx}', vy = '${vy}', vz = '${vz}' where id = '${id}'`);

    player.notify('~g~Склад успешно обновлен')
};

stocks.removeState = function() {
    methods.debug('stocks.removeState');
    mysql.executeQuery(`SELECT * FROM stocks`, function (err, rows, fields) {
        rows.forEach(function(item) {
            try {
                let state = stocks.get(item['id'], 'lab_state');
                if (state > 0) {
                    stocks.set(item['id'], 'lab_state', state - 1);
                    if (state === 1) {
                        let count = 5;
                        if (stocks.get(item['id'], 'lab_type') == 2)
                            count = 10;
                        if (stocks.get(item['id'], 'lab_type') == 3)
                            count = 20;
                        for (let i = 0; i < count; i++)
                        {
                            setTimeout(function () {
                                stocks.addCargo(item['id'], 38);
                            }, 10 * i);
                        }
                    }
                }

                state = stocks.get(item['id'], 'bunk_state'); //БУНКЕР
                if (state > 0) {
                    stocks.set(item['id'], 'bunk_state', state - 1);
                    if (state === 1) {
                        let count = 5;
                        if (stocks.get(item['id'], 'bunk_type') == 1)
                            count = 10;
                        if (stocks.get(item['id'], 'bunk_type') == 2)
                            count = 20;
                        for (let i = 0; i < count; i++)
                        {
                            setTimeout(function () {
                                stocks.addCargo(item['id'], 3);
                            }, 10 * i);
                        }
                    }
                }
            }
            catch (e) {}
        });
    });
};

stocks.saveAll = function() {
    methods.debug('stocks.saveAll');
    mysql.executeQuery(`SELECT * FROM stocks`, function (err, rows, fields) {
        rows.forEach(function(item) {
            stocks.save(item['id']);
        });
    });
};

stocks.save = function(id) {

    return new Promise((resolve) => {
        methods.debug('stocks.save');

        if (!stocks.has(id, "id")) {
            resolve();
            return;
        }

        let sql = "UPDATE stocks SET";
        sql = sql + " lab_state = '" + methods.parseInt(stocks.get(id, "lab_state")) + "'";
        sql = sql + ", lab_1_count = '" + methods.parseInt(stocks.get(id, "lab_1_count")) + "'";
        sql = sql + ", lab_2_count = '" + methods.parseInt(stocks.get(id, "lab_2_count")) + "'";
        sql = sql + ", lab_3_count = '" + methods.parseInt(stocks.get(id, "lab_3_count")) + "'";
        sql = sql + ", lab_4_count = '" + methods.parseInt(stocks.get(id, "lab_4_count")) + "'";
        sql = sql + ", lab_type = '" + methods.parseInt(stocks.get(id, "lab_type")) + "'";
        sql = sql + ", bunk_type = '" + methods.parseInt(stocks.get(id, "bunk_type")) + "'";
        sql = sql + ", bunk_state = '" + methods.parseInt(stocks.get(id, "bunk_state")) + "'";
        sql = sql + ", bunk_1_count = '" + methods.parseInt(stocks.get(id, "bunk_1_count")) + "'";
        sql = sql + ", bunk_2_count = '" + methods.parseInt(stocks.get(id, "bunk_2_count")) + "'";
        sql = sql + ", bunk_3_count = '" + methods.parseInt(stocks.get(id, "bunk_3_count")) + "'";
        sql = sql + ", bunk_4_count = '" + methods.parseInt(stocks.get(id, "bunk_4_count")) + "'";
        sql = sql + " where id = '" + methods.parseInt(stocks.get(id, "id")) + "'";

        mysql.executeQuery(sql, undefined, function () {
            resolve();
        });
    });
};

stocks.getData = function(id) {
    return Container.Data.GetAll(enums.offsets.stock + methods.parseInt(id));
};

stocks.get = function(id, key) {
    return Container.Data.Get(enums.offsets.stock + methods.parseInt(id), key);
};

stocks.has = function(id, key) {
    return Container.Data.Has(enums.offsets.stock + methods.parseInt(id), key);
};

stocks.set = function(id, key, val) {
    Container.Data.Set(enums.offsets.stock + methods.parseInt(id), key, val);
};

stocks.cargoUnload = function(player, bid = 1) {
    if (!user.isLogin(player))
        return;
    let veh = player.vehicle;
    if (!vehicles.exists(player.vehicle))
        return;

    bid = methods.parseInt(bid);
    
    try {
        let boxes = JSON.parse(veh.getVariable('box'));

        if (boxes[bid] === -1 || boxes[bid] === undefined || boxes[bid] === null) {
            player.notify('~r~Транспорт пуст');
            return;
        }

        let stockKey = stocks.getNearestVehWithCoords(player.position, 4);
        if (stockKey) {
            let houseData = stocks.getData(stockKey);
            if (houseData.get('user_id') != 0) {

                let id = houseData.get('id');
                let upgradeStr = stocks.get(id, 'upgrade');
                let upgrade = upgradeStr.split('_');

                let countLoad = 0;
                upgrade.forEach((item, i) => {
                    if (item == -1 && countLoad == 0) {
                        upgrade[i] = boxes[bid];
                        boxes[bid] = -1;
                        veh.setVariable('box', JSON.stringify(boxes));
                        countLoad++;
                    }
                });

                let upgradeNew = '';
                upgrade.forEach(item => {
                    upgradeNew += item + '_';
                });
                upgradeNew = upgradeNew.substring(0, upgradeNew.length - 1);

                stocks.set(id, 'upgrade', upgradeNew);
                mysql.executeQuery(`UPDATE stocks SET upgrade = '${upgradeNew}' where id = '${id}'`);
                stocks.loadUpgrades(upgradeNew, id, stocks.get(id, 'interior'));

                if (countLoad > 0)
                    player.notify(`~g~Вы разгрузили ящик`);
                else
                    player.notify(`~r~На складе нет места`);
            }
        }
        else if (methods.distanceToPos(player.position, new mp.Vector3(585.6728515625, 2790.1337890625, 41.18254470825195)) < 8)
        {
            let box = boxes[bid];
            boxes[bid] = -1;
            veh.setVariable('box', JSON.stringify(boxes));
            let fId = user.get(player, 'fraction_id');
            if (box && fId > 0) {
                coffer.addMoney(coffer.getIdByFraction(fId), stocks.boxList[box][5]);
                methods.saveFractionLog(
                    user.getRpName(player),
                    `Разгрузил ящик ${stocks.boxList[box][0]}`,
                    `Пополнение бюджета: ${methods.moneyFormat(stocks.boxList[box][5])}`,
                    fId
                );
            }
            player.notify(`~g~Вы разгрузили ящик`);
        }
        else if (
            methods.distanceToPos(player.position, new mp.Vector3(477.9193420410156, -3300.276123046875, 6.909423828125)) < 10 ||
            methods.distanceToPos(player.position, new mp.Vector3(137.56112670898438, -741.5675659179688, 32.13323211669922)) < 10 ||
            methods.distanceToPos(player.position, new mp.Vector3(329.8642272949219, -557.3507690429688, 27.743440628051758)) < 10 ||
            methods.distanceToPos(player.position, new mp.Vector3(-1070.80419921875, -853.8217163085938, 3.8680715560913086)) < 10 ||
            methods.distanceToPos(player.position, new mp.Vector3(-1314.7291259765625, -590.8836669921875, 27.772537231445312)) < 10 ||
            methods.distanceToPos(player.position, new mp.Vector3(4990.25537109375, -5738.73486328125, 18.8813133239746)) < 10 ||
            methods.distanceToPos(player.position, new mp.Vector3( -460.87451171875, 6009.25830078125, 30.340526580810547)) < 10
        )
        {
            let vInfo = methods.getVehicleInfo(player.vehicle.model);

            let fractionId = 7;
            if (methods.distanceToPos(player.position, new mp.Vector3(477.9193420410156, -3300.276123046875, 6.909423828125)) < 10)
                fractionId = 7;
            if (methods.distanceToPos(player.position, new mp.Vector3( 504.80950927734375, -3127.914306640625, 5.069790840148926)) < 10)
                fractionId = 7;
            if (methods.distanceToPos(player.position, new mp.Vector3( 329.8642272949219, -557.3507690429688, 27.743440628051758)) < 10)
                fractionId = 6;
            if (methods.distanceToPos(player.position, new mp.Vector3( 137.56112670898438, -741.5675659179688, 32.13323211669922)) < 10)
                fractionId = 5;
            if (methods.distanceToPos(player.position, new mp.Vector3( -460.87451171875, 6009.25830078125, 30.340526580810547)) < 10)
                fractionId = 4;
            if (methods.distanceToPos(player.position, new mp.Vector3( -1070.80419921875, -853.8217163085938, 3.8680715560913086)) < 10)
                fractionId = 3;
            if (methods.distanceToPos(player.position, new mp.Vector3( -1314.7291259765625, -590.8836669921875, 27.772537231445312)) < 10)
                fractionId = 2;
            if (methods.distanceToPos(player.position, new mp.Vector3( 4990.25537109375, -5738.73486328125, 18.88131332397461)) < 10)
                fractionId = 9;

            let box = boxes[bid];
            boxes[bid] = -1;
            veh.setVariable('box', JSON.stringify(boxes));

            try {
                player.vehicle.addAttachment('stock_' + box, true);
            }
            catch (e) {}

            let count = 1;
            if (vInfo.display_name === 'Cargobob' || vInfo.display_name === 'Cargobob3' || vInfo.display_name === 'Cargobob4' && fractionId === 7)
                count = 20;

            if (box === 13)
            {
                coffer.set(fractionId, 'stock_med', coffer.get(fractionId, 'stock_med') + 250 * count);
                coffer.set(fractionId, 'stock_eat', coffer.get(fractionId, 'stock_eat') + 100 * count);
            }
            if (box === 50)
            {
                coffer.set(fractionId, 'stock_gun', coffer.get(fractionId, 'stock_gun') + 20 * count);
                coffer.set(fractionId, 'stock_gunm', coffer.get(fractionId, 'stock_gunm') + 80 * count);
                coffer.set(fractionId, 'stock_ammo', coffer.get(fractionId, 'stock_ammo') + 250 * count);
                coffer.set(fractionId, 'stock_armour', coffer.get(fractionId, 'stock_armour') + 250 * count);
            }
            if (box === 2)
            {
                coffer.set(fractionId, 'stock_other', coffer.get(fractionId, 'stock_other') + 10 * count);
            }
            if (box === 1)
            {
                coffer.set(fractionId, 'stock_eat', coffer.get(fractionId, 'stock_eat') + 100 * count);
            }

            player.notify(`~g~Вы разгрузили ящик`);
        }
        else
        {
            player.notify('~r~Необходимо возле склада');
        }
    }
    catch (e) {
        methods.error('CargoUnload', e);
    }
};

stocks.addCargo = function(stockKey, bid = 1) {
    bid = methods.parseInt(bid);
    try {
        if (stockKey) {
            let houseData = stocks.getData(stockKey);
            if (houseData.get('user_id') != 0) {

                let id = houseData.get('id');
                let upgradeStr = stocks.get(id, 'upgrade');
                let upgrade = upgradeStr.split('_');

                let countLoad = 0;

                upgrade.forEach((item, i) => {
                    if (item == -1 && countLoad == 0) {
                        upgrade[i] = bid;
                        countLoad++;
                    }
                });

                let upgradeNew = '';
                upgrade.forEach(item => {
                    upgradeNew += item + '_';
                });
                upgradeNew = upgradeNew.substring(0, upgradeNew.length - 1);

                stocks.set(id, 'upgrade', upgradeNew);
                mysql.executeQuery(`UPDATE stocks SET upgrade = '${upgradeNew}' where id = '${id}'`);
                stocks.loadUpgrades(upgradeNew, id, stocks.get(id, 'interior'));

                return countLoad > 0;
            }
        }
    }
    catch (e) {
        methods.debug(e);
    }
    return false;
};

stocks.sellBySlot = function (player, slot) {
    methods.debug('stocks.sell');
    if (!user.isLogin(player))
        return;

    let stockId = player.dimension - enums.offsets.stock;

    let hInfo = stocks.getData(stockId);

    /*if (hInfo.get('user_id') != user.get(player, 'id')) {
        player.notify('~r~Этот склад вам не пренадлежит');
        return;
    }*/

    let id = hInfo.get('id');

    let upgradeStr = stocks.get(id, 'upgrade');
    let upgrade = upgradeStr.split('_');
    let box = methods.parseInt(upgrade[slot]);
    let boxPrice = stocks.boxList[box][5] / 1000;

    if (stocks.boxList[box][7] < 0)
        boxPrice = stocks.boxList[box][5] / 4;

    upgrade[slot] = -1;

    let upgradeNew = '';
    upgrade.forEach(item => {
        upgradeNew += item + '_';
    });
    upgradeNew = upgradeNew.substring(0, upgradeNew.length - 1);

    stocks.set(id, 'upgrade', upgradeNew);
    mysql.executeQuery(`UPDATE stocks SET upgrade = '${upgradeNew}' where id = '${id}'`);
    mysql.executeQuery(`DELETE FROM items WHERE owner_id = ${id + enums.offsets.stock} AND owner_type = ${slot + inventory.types.UserStock}`);

    stocks.loadUpgrades(upgradeNew, id, stocks.get(id, 'interior'));

    if (stocks.boxList[box][7] < 0) {
        user.addMoney(player, boxPrice, 'Продажа ' + stocks.boxList[box][0]);
        player.notify(`~g~Вы продали ${stocks.boxList[box][0]}. Деньги были зачислены на ваш кошелёк`);
    }
    else {
        if (user.get(player, 'fraction_id2') > 0) {
            user.addCryptoMoney(player, boxPrice / 2, 'Продажа ' + stocks.boxList[box][0]);
            fraction.addMoney(user.get(player, 'fraction_id2'), boxPrice / 2, 'Продажа груза от ' + user.getRpName(player));
            player.notify(`~g~Вы продали ${stocks.boxList[box][0]}. Деньги были зачислены на ваш BitCoin кошелёк. 50% зачислено в общак организации`);
        }
        else {
            user.addCryptoMoney(player, boxPrice, 'Продажа ' + stocks.boxList[box][0]);
            player.notify(`~g~Вы продали ${stocks.boxList[box][0]}. Деньги были зачислены на ваш BitCoin кошелёк`);
        }
    }
};

stocks.openBySlot = function (player, slot, boxId) {
    methods.debug('stocks.sell');
    if (!user.isLogin(player))
        return;

    let stockId = player.dimension - enums.offsets.stock;

    let hInfo = stocks.getData(stockId);

    /*if (hInfo.get('user_id') != user.get(player, 'id')) {
        player.notify('~r~Этот склад вам не пренадлежит');
        return;
    }*/

    let id = hInfo.get('id');

    let upgradeStr = stocks.get(id, 'upgrade');
    let upgrade = upgradeStr.split('_');

    upgrade[slot] = 0;

    let upgradeNew = '';
    upgrade.forEach(item => {
        upgradeNew += item + '_';
    });
    upgradeNew = upgradeNew.substring(0, upgradeNew.length - 1);

    stocks.set(id, 'upgrade', upgradeNew);
    mysql.executeQuery(`UPDATE stocks SET upgrade = '${upgradeNew}' where id = '${id}'`);

    let caseId = methods.getRandomInt(0, stocks.openCase[boxId].length);

    stocks.openCase[boxId][caseId].forEach(async item => {
        setTimeout(function () {
            if (boxId === 51)
            {
                inventory.addItem(item, 1, slot + inventory.types.UserStock, id + enums.offsets.stock, 1, 0, "{\"desc\":\"Расписание банков Fleeca\",\"type\":1}", 1);
            }
            else if (boxId === 53)
            {
                if (item === 474)
                    inventory.addItem(item, 1, slot + inventory.types.UserStock, id + enums.offsets.stock, 1, 0, "{\"id\":18}", 1);
                else
                    inventory.addItem(item, 1, slot + inventory.types.UserStock, id + enums.offsets.stock, 1, 0, "{\"desc\":\"Расписание банка Pacific\",\"type\":2}", 2);
            }
            else
                inventory.addItem(item, 1, slot + inventory.types.UserStock, id + enums.offsets.stock, 1, 0, "{}", 1);
        }, methods.getRandomInt(0, 1000))
    });

    stocks.loadUpgrades(upgradeNew, id, stocks.get(id, 'interior'));

    player.notify(`~g~Вы открыли ящик`);
};

stocks.sellAllByClass = function (player, className, price) {
    methods.debug('stocks.sell');
    if (!user.isLogin(player))
        return;

    let stockId = player.dimension - enums.offsets.stock;
    let hInfo = stocks.getData(stockId);

    /*if (hInfo.get('user_id') != user.get(player, 'id')) {
        player.notify('~r~Этот склад вам не пренадлежит');
        return;
    }*/

    let id = hInfo.get('id');
    let upgradeStr = stocks.get(id, 'upgrade');
    let upgrade = upgradeStr.split('_');
    let upgradeNew = '';

    upgrade.forEach(item => {
        if (methods.parseInt(item) >= 0 && stocks.boxList[methods.parseInt(item)][6] == className)
            upgradeNew += '-1_';
        else
            upgradeNew += item + '_';
    });
    upgradeNew = upgradeNew.substring(0, upgradeNew.length - 1);

    stocks.set(id, 'upgrade', upgradeNew);
    mysql.executeQuery(`UPDATE stocks SET upgrade = '${upgradeNew}' where id = '${id}'`);

    stocks.loadUpgrades(upgradeNew, id, stocks.get(id, 'interior'));

    if (user.get(player, 'fraction_id2') > 0) {
        user.addCryptoMoney(player, price / 2, 'Продажа ' + className);
        fraction.addMoney(user.get(player, 'fraction_id2'), price / 2, 'Продажа груза от ' + user.getRpName(player));
        player.notify(`~g~Вы продали ${className}. Деньги были зачислены на ваш BitCoin кошелёк. 50% зачислено в общак организации`);
    }
    else {
        user.addCryptoMoney(player, price, 'Продажа ' + className);
        player.notify(`~g~Вы продали ${className}. Деньги были зачислены на ваш BitCoin кошелёк`);
    }
};

stocks.upgradeAdd = function(player, id, slot, boxId) {
    if (!user.isLogin(player))
        return;
    let boxPrice = stocks.boxList[boxId][5];

    if (boxPrice > user.getBankMoney(player)) {
        player.notify('~r~На вашем счету не достаточно средств');
        return;
    }

    let upgradeStr = stocks.get(id, 'upgrade');
    let upgrade = upgradeStr.split('_');
    upgrade[slot] = boxId;

    let upgradeNew = '';

    upgrade.forEach(item => {
        upgradeNew += item + '_';
    });

    upgradeNew = upgradeNew.substring(0, upgradeNew.length - 1);

    stocks.set(id, 'upgrade', upgradeNew);
    mysql.executeQuery(`UPDATE stocks SET upgrade = '${upgradeNew}' where id = '${id}'`);

    coffer.addMoney(1, boxPrice);
    user.removeBankMoney(player, boxPrice, 'Покупка ящика на склад');

    stocks.addObject(boxId, slot, id, stocks.get(id, 'interior'));

    player.notify('~g~Поздравляем с покупкой');
};

stocks.upgradeResetAll = function(id) {

    let upgradeStr = stocks.get(id, 'upgrade');
    let upgrade = upgradeStr.split('_');
    let upgradeNew = '';
    upgrade.forEach(item => {
        upgradeNew += '-1_';
    });
    upgradeNew = upgradeNew.substring(0, upgradeNew.length - 1);

    stocks.set(id, 'upgrade', upgradeNew);

    mysql.executeQuery(`UPDATE stocks SET upgrade = '${upgradeNew}' where id = '${id}'`);
    mysql.executeQuery(`DELETE FROM items WHERE owner_id = ${id + enums.offsets.stock}`);

    stocks.loadUpgrades(upgradeNew, id, stocks.get(id, 'interior'));
};

stocks.loadUpgrades = function(upgradeString, id, interior) {

    mp.objects.forEachInDimension(id + enums.offsets.stock, o => {
        try {
            o.destroy();
        }
        catch (e) {
            methods.debug(e);
        }
    });

    upgradeString.split('_').forEach((boxId, slot) => {

        boxId = methods.parseInt(boxId);

        if (boxId == -1)
            return;

        stocks.addObject(boxId, slot, id, interior);
    });
};

stocks.addObject = function(boxId, slot, id, interior) {
    try {
        let int = interior;
        let box = stocks.boxList[boxId];
        let boxPos = new mp.Vector3(stocks.boxPosList[int][slot][0], stocks.boxPosList[int][slot][1], stocks.boxPosList[int][slot][2] + box[3]);
        let boxRot = new mp.Vector3(stocks.boxPosList[int][slot][3], stocks.boxPosList[int][slot][4], stocks.boxPosList[int][slot][5]);

        let obj = mp.objects.new(box[1], boxPos,
            {
                rotation: boxRot,
                alpha: 255,
                dimension: id + enums.offsets.stock
            });

        if (box[4] === true) {
            obj.setVariable('stockId', slot + inventory.types.UserStock);
            Container.Data.Set(id + enums.offsets.stock, "invAmountMax:" + (slot + inventory.types.UserStock), box[2]);
        }
    }
    catch (e) {}
};

stocks.getAll = function() {
    methods.debug('stocks.getAll');
    return stockList;
};

stocks.getNearestVehWithCoords = function(pos, r) {
    let nearest = undefined, dist;
    let min = r;
    stocks.getAll().forEach((st, key) => {
        dist = methods.distanceToPos(pos, st.vPos);
        if (dist < min) {
            nearest = key;
            min = dist;
        }
    });
    return nearest;
};

stocks.updateOwnerInfo = function (id, userId, userName) {
    methods.debug('stocks.updateOwnerInfo');
    id = methods.parseInt(id);
    userId = methods.parseInt(userId);

    stocks.set(id, "user_name", userName);
    stocks.set(id, "user_id", userId);

    if (userId === 0) {
        stocks.updatePin(id, 0);
        stocks.updatePin1(id, 0);
        stocks.updatePin2(id, 0);
        stocks.updatePin3(id, 0);
        stocks.updatePinO(id, 0);
        stocks.updatePinB(id, 0);
        stocks.updatePinL(id, 0);
        stocks.set(id, "upgrade_g", 0);
        stocks.set(id, 'upgrade_n', 0);
        stocks.set(id, 'upgrade_l', 0);
        stocks.set(id, 'upgrade_b', 0);
        stocks.set(id, 'lab_state', 0);
        stocks.set(id, 'lab_1_count', 0);
        stocks.set(id, 'lab_2_count', 0);
        stocks.set(id, 'lab_3_count', 0);
        stocks.set(id, 'lab_4_count', 0);
        stocks.set(id, 'bunk_state', 0);
        stocks.set(id, 'bunk_1_count', 0);
        stocks.set(id, 'bunk_2_count', 0);
        stocks.set(id, 'bunk_3_count', 0);
        stocks.set(id, 'bunk_4_count', 0);
        mysql.executeQuery("UPDATE stocks SET user_name = '" + userName + "', user_id = '" + userId + "', upgrade_g = '0', upgrade_n = '0', upgrade_l = '0', upgrade_b = '0', lab_state = '0', bunk_state = '0', lab_1_count = '0', lab_2_count = '0', lab_3_count = '0', lab_4_count = '0', bunk_1_count = '0', bunk_2_count = '0', bunk_3_count = '0', bunk_4_count = '0', tax_money = '0' where id = '" + id + "'");

        discord.sendMarketProperty(`Склад #${stocks.get(id, 'number')}`, `Адрес: ${stocks.get(id, 'address')} / ${stocks.get(id, 'street')} #${stocks.get(id, 'number')}\nГос. стоимость: ${methods.moneyFormat(stocks.get(id, 'price'))}\nТип: ${stocks.types[stocks.get(id, 'interior')]}`);

        stocks.upgradeResetAll(id);
    }
    else {
        mysql.executeQuery("UPDATE stocks SET user_name = '" + userName + "', user_id = '" + userId + "', tax_money = '0' where id = '" + id + "'");
    }

};

stocks.updateUpgradeG = function (id, status) {
    methods.debug('stocks.updateUpgradeG');
    if (typeof status === "boolean") {
        if (status)
            status = 1;
        else
            status = 0;
    }
    id = methods.parseInt(id);
    status = methods.parseInt(status);
    stocks.set(id, 'upgrade_g', status);
    mysql.executeQuery("UPDATE stocks SET upgrade_g = '" + status + "' where id = '" + id + "'");
};

stocks.updateUpgradeB = function (id, status) {
    methods.debug('stocks.updateUpgradeB');
    if (typeof status === "boolean") {
        if (status)
            status = 1;
        else
            status = 0;
    }
    id = methods.parseInt(id);
    status = methods.parseInt(status);
    stocks.set(id, 'upgrade_b', status);
    mysql.executeQuery("UPDATE stocks SET upgrade_b = '" + status + "' where id = '" + id + "'");
};

stocks.updateUpgradeL = function (id, status) {
    methods.debug('stocks.updateUpgradeL');
    if (typeof status === "boolean") {
        if (status)
            status = 1;
        else
            status = 0;
    }
    id = methods.parseInt(id);
    status = methods.parseInt(status);
    stocks.set(id, 'upgrade_l', status);
    mysql.executeQuery("UPDATE stocks SET upgrade_l = '" + status + "' where id = '" + id + "'");
};

stocks.updateUpgradeN = function (id, status) {
    methods.debug('stocks.updateUpgradeN');
    if (typeof status === "boolean") {
        if (status)
            status = 1;
        else
            status = 0;
    }
    id = methods.parseInt(id);
    status = methods.parseInt(status);
    stocks.set(id, 'upgrade_n', status);
    mysql.executeQuery("UPDATE stocks SET upgrade_n = '" + status + "' where id = '" + id + "'");
};

stocks.updatePin = function (id, pin) {
    methods.debug('stocks.updatePin');
    id = methods.parseInt(id);
    pin = methods.parseInt(pin);
    stocks.set(id, 'pin', pin);
    mysql.executeQuery("UPDATE stocks SET pin = '" + pin + "' where id = '" + id + "'");
};

stocks.updatePin1 = function (id, pin) {
    methods.debug('stocks.updatePin');
    id = methods.parseInt(id);
    pin = methods.parseInt(pin);
    stocks.set(id, 'pin1', pin);
    mysql.executeQuery("UPDATE stocks SET pin1 = '" + pin + "' where id = '" + id + "'");
};

stocks.updatePin2 = function (id, pin) {
    methods.debug('stocks.updatePin');
    id = methods.parseInt(id);
    pin = methods.parseInt(pin);
    stocks.set(id, 'pin2', pin);
    mysql.executeQuery("UPDATE stocks SET pin2 = '" + pin + "' where id = '" + id + "'");
};

stocks.updatePin3 = function (id, pin) {
    methods.debug('stocks.updatePin');
    id = methods.parseInt(id);
    pin = methods.parseInt(pin);
    stocks.set(id, 'pin3', pin);
    mysql.executeQuery("UPDATE stocks SET pin3 = '" + pin + "' where id = '" + id + "'");
};

stocks.updatePinO = function (id, pin) {
    methods.debug('stocks.updatePin');
    id = methods.parseInt(id);
    pin = methods.parseInt(pin);
    stocks.set(id, 'pin_o', pin);
    mysql.executeQuery("UPDATE stocks SET pin_o = '" + pin + "' where id = '" + id + "'");
};

stocks.updatePinL = function (id, pin) {
    methods.debug('stocks.updatePinL');
    id = methods.parseInt(id);
    pin = methods.parseInt(pin);
    stocks.set(id, 'pin_l', pin);
    mysql.executeQuery("UPDATE stocks SET pin_l = '" + pin + "' where id = '" + id + "'");
};

stocks.updatePinB = function (id, pin) {
    methods.debug('stocks.updatePinB');
    id = methods.parseInt(id);
    pin = methods.parseInt(pin);
    stocks.set(id, 'pin_b', pin);
    mysql.executeQuery("UPDATE stocks SET pin_b = '" + pin + "' where id = '" + id + "'");
};

stocks.labStart = function (id, type, count) {
    methods.debug('stocks.labStart');
    stocks.set(id, 'lab_state', type * 6);
    stocks.set(id, 'lab_type', type);
    stocks.set(id, 'lab_1_count', stocks.get(id, 'lab_1_count') - count);
    stocks.set(id, 'lab_2_count', stocks.get(id, 'lab_2_count') - count);
    stocks.set(id, 'lab_3_count', stocks.get(id, 'lab_3_count') - count);
    stocks.set(id, 'lab_4_count', stocks.get(id, 'lab_4_count') - count);
    stocks.save(id);
};

stocks.bunkStart = function (id, type, count) {
    methods.debug('stocks.labStart');
    stocks.set(id, 'bunk_state', type * 6);
    stocks.set(id, 'bunk_type', type);
    stocks.set(id, 'bunk_1_count', stocks.get(id, 'bunk_1_count') - count);
    stocks.set(id, 'bunk_2_count', stocks.get(id, 'bunk_2_count') - count);
    stocks.set(id, 'bunk_3_count', stocks.get(id, 'bunk_3_count') - count);
    stocks.set(id, 'bunk_4_count', stocks.get(id, 'bunk_4_count') - count);
    stocks.save(id);
};

stocks.sell = function (player) {
    methods.debug('stocks.sell');
    if (!user.isLogin(player))
        return;

    let stockId = user.get(player, 'stock_id');

    let hInfo = stocks.getData(stockId);

    if (hInfo.get('user_id') != user.get(player, 'id')) {
        player.notify('~r~Этот склад вам не пренадлежит');
        return;
    }

    let nalog = methods.parseInt(hInfo.get('price') * (100 - coffer.getTaxProperty()) / 100);

    user.set(player, 'stock_id', 0);

    stocks.updateOwnerInfo(hInfo.get('id'), 0, '');
    stocks.upgradeResetAll(hInfo.get('id'));

    coffer.removeMoney(1, nalog);
    user.addMoney(player, nalog, 'Продажа склада ' + hInfo.get('address') + ' №' + hInfo.get('number'));

    setTimeout(function () {
        if (!user.isLogin(player))
            return;
        user.addHistory(player, 3, 'Продал склад ' + hInfo.get('address') + ' №' + hInfo.get('number') + '. Цена: ' + methods.moneyFormat(nalog));
        player.notify(`~g~Вы продали недвижимость\nНалог:~s~ ${coffer.getTaxProperty()}%\n~g~Получено:~s~ ${methods.moneyFormat(nalog)}`);
        user.save(player);
    }, 1000);
};

stocks.buy = function (player, id) {
    methods.debug('stocks.buy');

    if (!user.isLogin(player))
        return;

    let hInfo = stocks.getData(id);
    if (user.get(player, 'stock_id') > 0) {
        player.notify('~r~У Вас есть недвижимость');
        return false;
    }
    if (hInfo.get('price') > user.getMoney(player)) {
        player.notify('~r~У Вас не хватает средств');
        return false;
    }
    if (hInfo.get('user_id') > 0) {
        player.notify('~r~Недвижимость уже куплена');
        return false;
    }

    user.set(player, 'stock_id', id);

    stocks.updateOwnerInfo(id, user.get(player, 'id'), user.get(player, 'name'));

    coffer.addMoney(1, hInfo.get('price'));
    user.removeMoney(player, hInfo.get('price'), 'Покупка склада ' + hInfo.get('address') + ' №' + hInfo.get('number'));
    setTimeout(function () {
        if (!user.isLogin(player))
            return;
        user.addHistory(player, 3, 'Купил склад ' + hInfo.get('address') + ' №' + hInfo.get('number') + '. Цена: ' + methods.moneyFormat(hInfo.get('price')));
        user.save(player);
        player.notify('~g~Поздравляем с покупкой недвижимости!');
    }, 500);
    return true;
};

stocks.enter = function (player, id) {
    methods.debug('stocks.enter', id);

    if (!user.isLogin(player))
        return;
    id = methods.parseInt(id);

    let hInfo = stocks.getData(id);
    player.dimension = id + enums.offsets.stock;
    let intId = hInfo.get('interior');
    user.teleport(player, stocks.interiorList[intId][0], stocks.interiorList[intId][1], stocks.interiorList[intId][2] + 1, stocks.interiorList[intId][3]);
};

stocks.enter1 = function (player, id) {
    methods.debug('stocks.enter', id);

    if (!user.isLogin(player))
        return;
    id = methods.parseInt(id);

    let hInfo = stocks.getData(id);
    player.dimension = id + enums.offsets.stock;
    user.teleport(player, 174.17990112304688, 5207.748046875, -88.07341613769531, 89.15861511230469);
};

stocks.enterl = function (player, id) {
    methods.debug('stocks.enter', id);

    if (!user.isLogin(player))
        return;
    id = methods.parseInt(id);

    let hInfo = stocks.getData(id);
    player.dimension = id + enums.offsets.stock;
    user.teleport(player, 1088.6865234375, -3188.01025390625, -39.99346923828125, 189.6532745361328);
};

stocks.enterb = function (player, id) {
    methods.debug('stocks.enter', id);

    if (!user.isLogin(player))
        return;
    id = methods.parseInt(id);

    let hInfo = stocks.getData(id);
    player.dimension = id + enums.offsets.stock;
    user.teleport(player, 890.7874755859375, -3245.426025390625, -98.6081771850586, 88.59600830078125);
};

stocks.enterv = function (player, id) {
    methods.debug('stocks.enter', id);

    if (!user.isLogin(player))
        return;

    let hInfo = stocks.getData(id);

    if (vehicles.exists(player.vehicle)) {
        let vInfo = methods.getVehicleInfo(player.vehicle.model);
        if ((vInfo.class_name == 'Planes' ||
            vInfo.class_name == 'Boats' ||
            vInfo.class_name == 'Helicopters' ||
            vInfo.class_name == 'Emergency' ||
            vInfo.class_name == 'Commercials' ||
            vInfo.class_name == 'Service' ||
            vInfo.class_name == 'Industrial' ||
            vInfo.class_name == 'Military') /*&& vInfo.display_name !== 'Mule4' && vInfo.display_name !== 'Pounder2'*/)
        {
            player.notify('~r~Данному классу авто запрещено заезжать в гараж');
            return;
        }

        if (player.vehicle.getVariable('cargoId'))
        {
            player.notify('~r~Транспорту с грузом запрещено заезжать в гараж');
            return;
        }

        /*if (hInfo.get('interior') === 0 && vInfo.display_name !== 'Mule4' && vInfo.display_name !== 'Pounder2') {
            player.notify('~r~Данному авто запрещено заезжать в гараж маленького склада, только большой средний');
            return;
        }*/
    }

    let intId = hInfo.get('interior');
    id = methods.parseInt(id);

    let pos = new mp.Vector3(stocks.interiorList[intId][4], stocks.interiorList[intId][5], stocks.interiorList[intId][6]);
    let v = methods.getNearestVehicleWithCoords(pos, 4, id + enums.offsets.stock);

    if (vehicles.exists(v) && player.vehicle) {
        player.notify('~r~К сожалению, сейчас у ворот уже стоит транспорт, необходимо чтобы он отъехал');
        return;
    }

    if (vehicles.exists(player.vehicle)) {
        player.vehicle.dimension = id + enums.offsets.stock;
        /*vehicles.set(player.vehicle.id, 'lastStockPos', JSON.stringify(player.vehicle.position));
        vehicles.set(player.vehicle.id, 'lastStockRot', player.vehicle.heading);*/
        /*player.vehicle.getOccupants().forEach(p => {
            if (user.isLogin(p) && p.id !== player.id)
            {
                p.dimension = 0;
                p.removeFromVehicle();
            }
        });*/
    }
    else
        player.dimension = id + enums.offsets.stock;
    user.teleportVeh(player, stocks.interiorList[intId][4], stocks.interiorList[intId][5], stocks.interiorList[intId][6], stocks.interiorList[intId][7]);
};

stocks.enterv1 = function (player, id) {
    methods.debug('stocks.enter', id);

    if (!user.isLogin(player))
        return;

    let hInfo = stocks.getData(id);

    if (vehicles.exists(player.vehicle)) {
        let vInfo = methods.getVehicleInfo(player.vehicle.model);
        if ((vInfo.class_name == 'Planes' ||
            vInfo.class_name == 'Boats' ||
            vInfo.class_name == 'Helicopters' ||
            vInfo.class_name == 'Emergency' ||
            vInfo.class_name == 'Military') /*&& vInfo.display_name !== 'Mule4' && vInfo.display_name !== 'Pounder2'*/)
        {
            player.notify('~r~Данному классу авто запрещено заезжать в гараж');
            return;
        }

        if (player.vehicle.getVariable('cargoId'))
        {
            player.notify('~r~Транспорту с грузом запрещено заезжать в гараж');
            return;
        }

        /*if (hInfo.get('interior') === 0 && vInfo.display_name !== 'Mule4' && vInfo.display_name !== 'Pounder2') {
            player.notify('~r~Данному авто запрещено заезжать в гараж маленького склада, только большой средний');
            return;
        }*/
    }

    let intId = hInfo.get('interior');
    id = methods.parseInt(id);

    let pos = new mp.Vector3(169.47637939453125, 5206.49951171875, -89.1696548461914);
    let v = methods.getNearestVehicleWithCoords(pos, 5, id + enums.offsets.stock);

    if (vehicles.exists(v) && player.vehicle) {
        player.notify('~r~К сожалению, сейчас у ворот уже стоит транспорт, необходимо чтобы он отъехал');
        return;
    }

    if (vehicles.exists(player.vehicle)) {
        player.vehicle.dimension = id + enums.offsets.stock;
        /*vehicles.getOccupants(player.vehicle).forEach(p => {
            if (user.isLogin(p))
                p.dimension = id + enums.offsets.stock;
        });*/
        /*vehicles.set(player.vehicle.id, 'lastStockPos', JSON.stringify(player.vehicle.position));
        vehicles.set(player.vehicle.id, 'lastStockRot', player.vehicle.heading);*/
        /*player.vehicle.getOccupants().forEach(p => {
            if (user.isLogin(p) && p.id !== player.id)
            {
                p.dimension = 0;
                p.removeFromVehicle();
            }
        });*/
    }
    else
        player.dimension = id + enums.offsets.stock;

    if (player.vehicle)
        user.teleportVeh(player, 169.47637939453125, 5206.49951171875, -88.0696548461914, 180.1299591064453);
    else
        user.teleport(player, 174.17990112304688, 5207.748046875, -88.07341613769531, 89.15861511230469);
};

stocks.entervb = function (player, id) {
    methods.debug('stocks.enter', id);

    if (!user.isLogin(player))
        return;

    let hInfo = stocks.getData(id);

    if (vehicles.exists(player.vehicle)) {
        let vInfo = methods.getVehicleInfo(player.vehicle.model);
        if ((vInfo.class_name == 'Planes' ||
            vInfo.class_name == 'Boats' ||
            vInfo.class_name == 'Helicopters' ||
            vInfo.class_name == 'Emergency' ||
            vInfo.class_name == 'Military') /*&& vInfo.display_name !== 'Mule4' && vInfo.display_name !== 'Pounder2'*/)
        {
            player.notify('~r~Данному классу авто запрещено заезжать в гараж');
            return;
        }

        if (player.vehicle.getVariable('cargoId'))
        {
            player.notify('~r~Транспорту с грузом запрещено заезжать в гараж');
            return;
        }

        /*if (hInfo.get('interior') === 0 && vInfo.display_name !== 'Mule4' && vInfo.display_name !== 'Pounder2') {
            player.notify('~r~Данному авто запрещено заезжать в гараж маленького склада, только большой средний');
            return;
        }*/
    }

    let intId = hInfo.get('interior');
    id = methods.parseInt(id);

    let pos = new mp.Vector3(890.7874755859375, -3245.426025390625, -98.6081771850586);
    let v = methods.getNearestVehicleWithCoords(pos, 5, id + enums.offsets.stock);

    if (vehicles.exists(v) && player.vehicle) {
        player.notify('~r~К сожалению, сейчас у ворот уже стоит транспорт, необходимо чтобы он отъехал');
        return;
    }

    if (vehicles.exists(player.vehicle)) {
        player.vehicle.dimension = id + enums.offsets.stock;
        /*vehicles.getOccupants(player.vehicle).forEach(p => {
            if (user.isLogin(p))
                p.dimension = id + enums.offsets.stock;
        });*/
        /*vehicles.set(player.vehicle.id, 'lastStockPos', JSON.stringify(player.vehicle.position));
        vehicles.set(player.vehicle.id, 'lastStockRot', player.vehicle.heading);*/
        /*player.vehicle.getOccupants().forEach(p => {
            if (user.isLogin(p) && p.id !== player.id)
            {
                p.dimension = 0;
                p.removeFromVehicle();
            }
        });*/
    }
    else
        player.dimension = id + enums.offsets.stock;

    if (player.vehicle)
        user.teleportVeh(player, 890.7874755859375, -3245.426025390625, -98.6081771850586, 88.59600830078125);
    else
        user.teleport(player, 890.7874755859375, -3245.426025390625, -98.6081771850586, 88.59600830078125);
};